||----------------------------------------------------------||
||----------------------Doodle Application------------------||
||----------------------CS349 Winter 2016-------------------||
||------------------------Assignment 2----------------------||
||----------------------------------------------------------||



Created by:
||--------------------------------------------------------||
||                    Long Nguyen                         ||
||                     l34nguye                           ||
||                     20455912                           ||
||--------------------------------------------------------||

(NOTE: skip to functionality if you dont want to waste time)




//--------------------------STRUCTURE---------------------------//

The implementation of this application is based on MVC model as taught in class:

- The file DoodleModel.java is the model of this project that handle background processing.
- The view classes are implemented with the Controller embeded.

Inside Model package:
	+) Constants.java : provide the global constants used in the project.
	+) Draw.java: a helper class that store the stroke.
	+) IView.java: super-class for all the view classes.
	+) DoodleModel.java : the model itself.

Inside View package:
	+) ColourPallete.java : view for Colour pannel and stroke (basically everything on the left of the screen)
	+) DoodleMenuBar.java: view for menubar (This actually isnt 100% a View but it act the same way)
	+) PaintCanvas.java : view for canvas.
	+) PlayBack.java: the bottom pannel that manipulate the playback functionality.

Doodle.java: main class that run the program and set up the frame






//------------------------------IMPLEMENTATION DESIGN --------------------------//

- The main frame makes use of BorderLayout. where ColourPallete == WEST
												 Canvas == CENTRE
												 PlayBack == SOUTH

- The ColourPallete is a JPanel using BoxLayout that consists of:
	+) Pallete : which is make use of GridLayout with 10 colours where the last one is customizable
	+) Stroke Thickness Scroller: scrolling to change the stroke thickness
	+) Clear Button: that clear everything on the Canvas

- The PlayBack uses BoxLayout.

- MenuBar is (you know) menubar.





//---------------------------------FUNCTIONALITY-----------------------------------//

MENUBAR:
	- File:
		+) New : works as intended
		+) Save: works as intended
		+) SaveAs: works as intended
		+) Load: works as intended
		+) Exit: works as intended

		the file is saved in:- binary format that is just a file with the extension of your liking.
							 - .txt file
				WARNING: only load the files generated by this app. NO guarantee behaviour if load other files
	- View:
		+) DOES NOT WORK and dont know why

	- About:
		+) some supprise, please read

COLOURPALLETE:
	- Pallete: consist of 9 non-customizeable color button. The last button is customizable with JColorChooser

	- There is a current color display after the pallete that is not interactable. It shows what current colour is picked

	- Stroke thickness slider can slide.

	- clear button:
		+) ONLY clear the canvas, all the saved stroke still there in the playback widget


PLAYBACK:
	- IMPORTANT: should press the clear button before press Play.


		- NOTE: shrinked down the time between stroke or points to 1s if the interval is too long (more than 1s)

	- click on Play button again to stop the animation. click again to continue.

	- Canvas, Start, End, and Slider are disable while the animation is running.

	- You can slide the slider to chose when to replay.

    - BUG ALERT: sometime during playing back, the stop location doesnt match the stroke label tick.

*) BONUS: added realtime drawing.
